"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

type BaseResponse {
  message: String

  status: Boolean

  response: JSON

  params: JSON
}

"""
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
"""
scalar String

"""
The `Boolean` scalar type represents `true` or `false`.
"""
scalar Boolean

type BaseList {
  count: Int

  next: String

  previous: String

  results: [BaseName]

  status: Boolean

  message: String
}

"""
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
"""
scalar Int

type Ability {
  ability: BaseName

  is_hidden: Boolean

  slot: Int
}

type GameIndex {
  game_index: Int

  version: BaseName
}

type VersionDetail {
  rarity: Int

  version: BaseName
}

type HeldItem {
  item: BaseName

  version_details: [VersionDetail]
}

type VersionGroupDetail {
  level_learned_at: Int

  move_learn_method: BaseName

  version_group: BaseName
}

type Move {
  move: BaseName

  version_group_details: [VersionGroupDetail]
}

type Sprite {
  back_default: String

  back_female: String

  back_shiny: String

  back_shiny_female: String

  front_default: String

  front_female: String

  front_shiny: String

  front_shiny_female: String
}

type Stat {
  base_stat: Int

  effort: Int

  stat: BaseName
}

type Type {
  slot: Int

  type: BaseName
}

type BaseName {
  id: Int

  url: String

  name: String
}

type Pokemon {
  abilities: [Ability]

  base_experience: Int

  forms: [BaseName]

  game_indices: [GameIndex]

  height: Int

  held_items: [HeldItem]

  id: Int

  is_default: Boolean

  location_area_encounters: String

  moves: [Move]

  name: String

  order: Int

  species: BaseName

  sprites: Sprite

  stats: [Stat]

  types: [Type]

  weight: Int

  status: Boolean

  message: String
}

type PokemonItem {
  id: Int

  url: String

  name: String

  image: String

  artwork: String

  dreamworld: String
}

type PokemonList {
  count: Int

  next: String

  previous: String

  nextOffset: Int

  prevOffset: Int

  params: JSON

  results: [PokemonItem]

  status: Boolean

  message: String
}

type Query {
  abilities: BaseList

  ability(ability: String!): BaseResponse

  berries: BaseList

  berry(berry: String!): BaseResponse

  eggGroups: BaseList

  eggGroup(eggGroup: String!): BaseResponse

  encounterMethods: BaseList

  encounterMethod(encounterMethod: String!): BaseResponse

  evolutionChains: BaseList

  evolutionChain(id: String!): BaseResponse

  evolutionTriggers: BaseList

  evolutionTrigger(name: String!): BaseResponse

  genders: BaseList

  gender(gender: String!): BaseResponse

  growthRates: BaseList

  growthRate(growthRate: String!): BaseResponse

  locations: BaseList

  location(location: String!): BaseResponse

  moves: BaseList

  move(move: String!): BaseResponse

  natures: BaseList

  nature(nature: String!): BaseResponse

  pokemons(limit: Int, offset: Int): PokemonList

  pokemon(name: String!): Pokemon

  regions: BaseList

  region(region: String!): BaseResponse

  species: BaseList

  types: BaseList
}

enum CacheControlScope {
  PUBLIC

  PRIVATE
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

"""
A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.
"""
type __Schema {
  description: String

  """
  A list of all types supported by this server.
  """
  types: [__Type!]!

  """
  The type that query operations will be rooted at.
  """
  queryType: __Type!

  """
  If this server supports mutation, the type that mutation operations will be rooted at.
  """
  mutationType: __Type

  """
  If this server support subscription, the type that subscription operations will be rooted at.
  """
  subscriptionType: __Type

  """
  A list of all directives supported by this server.
  """
  directives: [__Directive!]!
}

"""
The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.

Depending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByUrl`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.
"""
type __Type {
  kind: __TypeKind!

  name: String

  description: String

  specifiedByUrl: String

  fields(includeDeprecated: Boolean = false): [__Field!]

  interfaces: [__Type!]

  possibleTypes: [__Type!]

  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]

  inputFields(includeDeprecated: Boolean = false): [__InputValue!]

  ofType: __Type
}

"""
An enum describing what kind of type a given `__Type` is.
"""
enum __TypeKind {
  """
  Indicates this type is a scalar.
  """
  SCALAR

  """
  Indicates this type is an object. `fields` and `interfaces` are valid fields.
  """
  OBJECT

  """
  Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields.
  """
  INTERFACE

  """
  Indicates this type is a union. `possibleTypes` is a valid field.
  """
  UNION

  """
  Indicates this type is an enum. `enumValues` is a valid field.
  """
  ENUM

  """
  Indicates this type is an input object. `inputFields` is a valid field.
  """
  INPUT_OBJECT

  """
  Indicates this type is a list. `ofType` is a valid field.
  """
  LIST

  """
  Indicates this type is a non-null. `ofType` is a valid field.
  """
  NON_NULL
}

"""
Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.
"""
type __Field {
  name: String!

  description: String

  args(includeDeprecated: Boolean = false): [__InputValue!]!

  type: __Type!

  isDeprecated: Boolean!

  deprecationReason: String
}

"""
Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.
"""
type __InputValue {
  name: String!

  description: String

  type: __Type!

  """
  A GraphQL-formatted string representing the default value for this input value.
  """
  defaultValue: String

  isDeprecated: Boolean!

  deprecationReason: String
}

"""
One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.
"""
type __EnumValue {
  name: String!

  description: String

  isDeprecated: Boolean!

  deprecationReason: String
}

"""
A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.

In some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.
"""
type __Directive {
  name: String!

  description: String

  isRepeatable: Boolean!

  locations: [__DirectiveLocation!]!

  args(includeDeprecated: Boolean = false): [__InputValue!]!
}

"""
A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.
"""
enum __DirectiveLocation {
  """
  Location adjacent to a query operation.
  """
  QUERY

  """
  Location adjacent to a mutation operation.
  """
  MUTATION

  """
  Location adjacent to a subscription operation.
  """
  SUBSCRIPTION

  """
  Location adjacent to a field.
  """
  FIELD

  """
  Location adjacent to a fragment definition.
  """
  FRAGMENT_DEFINITION

  """
  Location adjacent to a fragment spread.
  """
  FRAGMENT_SPREAD

  """
  Location adjacent to an inline fragment.
  """
  INLINE_FRAGMENT

  """
  Location adjacent to a variable definition.
  """
  VARIABLE_DEFINITION

  """
  Location adjacent to a schema definition.
  """
  SCHEMA

  """
  Location adjacent to a scalar definition.
  """
  SCALAR

  """
  Location adjacent to an object type definition.
  """
  OBJECT

  """
  Location adjacent to a field definition.
  """
  FIELD_DEFINITION

  """
  Location adjacent to an argument definition.
  """
  ARGUMENT_DEFINITION

  """
  Location adjacent to an interface definition.
  """
  INTERFACE

  """
  Location adjacent to a union definition.
  """
  UNION

  """
  Location adjacent to an enum definition.
  """
  ENUM

  """
  Location adjacent to an enum value definition.
  """
  ENUM_VALUE

  """
  Location adjacent to an input object type definition.
  """
  INPUT_OBJECT

  """
  Location adjacent to an input object field definition.
  """
  INPUT_FIELD_DEFINITION
}

directive @cacheControl (maxAge: Int, scope: CacheControlScope) on FIELD_DEFINITION|OBJECT|INTERFACE

"""
Directs the executor to include this field or fragment only when the `if` argument is true.
"""
directive @include ("Included when true." if: Boolean!) on FIELD|FRAGMENT_SPREAD|INLINE_FRAGMENT

"""
Directs the executor to skip this field or fragment when the `if` argument is true.
"""
directive @skip ("Skipped when true." if: Boolean!) on FIELD|FRAGMENT_SPREAD|INLINE_FRAGMENT

"""
Marks an element of a GraphQL schema as no longer supported.
"""
directive @deprecated ("Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https:\/\/commonmark.org\/)." reason: String = "No longer supported") on FIELD_DEFINITION|ARGUMENT_DEFINITION|INPUT_FIELD_DEFINITION|ENUM_VALUE

"""
Exposes a URL that specifies the behaviour of this scalar.
"""
directive @specifiedBy ("The URL that specifies the behaviour of this scalar." url: String!) on SCALAR

schema {
  query: Query
}
